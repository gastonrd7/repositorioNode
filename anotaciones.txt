npm run start
npm start

npm init (para cargarle parametros a nuestra api)
npm install express --save (facilita crear una api rest)
npm install body-parser --save / npm -i -S body-parser
   : esto nos permite poder parsear el cuerpo de la peticion, esos datos que enviemos tratar y recogerlos en node
   : funciona como midleware, son capas que se le va añadiendo
npm install nodemon --devDependencies / npm i -D nodemon
   : esto nos permite poder generar cambios y que se puedan visualizar cuando tenemos nuestra app node corriendo,
	sino deberiamos haberla parado y volver a ejecutar para poder verlos.
   : luego ponemos en script "start": "nodemon index.js", y ya cada cambio es reflejado con nuestra app corriendo

Instalar jsonformaterr en el chrome

--InstalarMongoDB
mongodb.org
https://www.mongodb.com/download-center?jmp=nav#atlas
contraseña: Gmatias1234*

"C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe" --dbpath C:\MongoDb\data\db ///// (iniciar el motor, pero guardar los datos donde le indique)
"C:\Program Files\MongoDB\Server\3.6\bin\mongo.exe" ///// para conectar con las base de datos, show dbs

	arrrancar mongo
	mongod (.exe) (hacer correr mongo, si o si)
	acceder a la bd(conectar), al motor, si ya esta corriendo
	mongo (.exe)
	show dbs

	necesitamos un driver para conectarnos de la api a mongo
	este seria: mongoose
-------------------------

npm i -S mongoose (libreria que nos permite conectar nuestra api con mongoDB)

con mongoose vamos a modelar nuestra BD, generar nuestros esquemas

npm i -S bcrypt-nodejs //sirve para encriptar la contraseña antes de guardar en la bd
npm i -S crypto // genera un hash con respecto al gravatar, no se muy bien como es esto

usar jspn webtoker, para autenticacion de nuestra api, totalmente desacoplada de la UI
https://jwt.io (el toker se guarda en local starage, o sesion starage, y este token viajara en la cabecera de la llamada)
nodejs.com y buscar jwt-simple

npm install jwt-simple
npm i -S moment //libreria que ayuda con las fechas

------------aun no implementado en este proyecto, lo hice en otro----------------
Para meterle swagger
npm install -g swagger

swagger project create PruebaPiloto
swagger project start
swagger project edit
----------------------------------------------------------------------------------
Pra subir nuestra Api, recordar que tenemos firebase tambien, previamente trabajamos con ella
https://www.heroku.com/
nos descargamos el cliente, para verificar que esta instalado heroku --version
Para poder desplegar la aplicacion debemos hacer:
cmd
C:\React\RepositorioNode\api-rest>heroku login
Enter your Heroku credentials:
Email: gaston.rd7@gmail.com
Password: ***********

b----Install the Heroku CLI----
Download and install the Heroku CLI.
$ heroku login

----Create a new Git repository----
$ cd my-project/
$ git init
$ heroku git:remote -a api-rest-rd2017


----Existing Git repository----
$ heroku git:remote -a api-rest-rd2017

----Deploy your application----
$ git add .
$ git commit -am "make it better"
$ git push heroku master

----para ver el log de heroku----
heroku logs

creo una variable en heroku, cuando suba esta variable va a existin, entonces entra por ese lado
ya que en el config tengo esto : db: process.env.PROD_MONGODB || 'mongodb://localhost:27017/shop'
heroku config:set PROD_MONGODB=mongodb://gaston:Gmatias1234@ds239587.mlab.com:39587/heroku_jpz3m3m0
tuve que sacar esto de la api para poder subirla
"scripts": {
    "start": "nodemon index.js",
    
		"debug": "DEBUG=pd* nodemon --inspect-brk --harmony --nolazy server.js -e js,mustache,json,yaml",
    
		"test": "echo \"Error: no test specified\" && exit 1"
  },